#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('twitchclock-arduino:server');
const http = require('http');
// const https = require('https');
// const path = require('path');
// const fs = require('fs');
/**
 * Normalize a port into a number, string, or false.
 */

let normalizePort =(val) =>{
  const port = parseInt(val, 10);
  
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  
  if (port >= 0) {
    // port number
    return port;
  }
  
  return false;
}



/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * 
 */


/**
 * Create HTTPs server.
 */
// const server = https.createServer({
//   key: fs.readFileSync(path.join(__dirname, '../cert', 'key.pem')),
//   cert: fs.readFileSync(path.join(__dirname, '../cert', 'cert.pem'))
// }, app);




/**
 * Event listener for HTTP server "error" event.
 */

const onError =(error)=> {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening =()=> {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Get port from environment and store in Express.
 */

 let port = normalizePort(process.env.PORT || '3001');
 app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */


 server.listen(port,()=>{console.log(`Server listening at http://localhost:${port}`)});
 server.on('error', onError);
 server.on('listening', onListening);




